name: "CodeQL Advanced"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '43 4 * * 2'

jobs:
  analyze:
    name: Analyze Flutter (${{ matrix.language }})
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      contents: read
      actions: read
      packages: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: java-kotlin
          build-mode: manual

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11


      # ðŸª¶ Installation de Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2.12.0
        with:
          flutter-version: '3.7.7'

      - name: Install dependencies
        run: flutter pub get

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      # ðŸ”§ Build Flutter (et donc Android)
      - if: matrix.language == 'java-kotlin'
        name: Build Flutter app (APK)
        run: |
          flutter build apk --debug

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
                # Analyse Flutter/Dart complÃ©mentaire
      - name: Static analysis (flutter analyze)
        run: |
          flutter analyze --no-fatal-infos --no-fatal-warnings --write=analyze-output.txt || true
          flutter analyze --format=machine | tee flutter-sarif.txt || true

      - name: Convert flutter analyze to SARIF
        run: |
          pip install sarif-tools
          python <<'PYCODE'
      import json, uuid, datetime, os
      
      sarif = {
        "version": "2.1.0",
        "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
        "runs": [{
          "tool": {
            "driver": {
              "name": "flutter analyze",
              "informationUri": "https://docs.flutter.dev/development/tools/analyze",
              "rules": []
            }
          },
          "results": []
        }]
      }
      
      issues = []
      if os.path.exists("flutter-sarif.txt"):
        with open("flutter-sarif.txt") as f:
          for line in f:
            parts = line.strip().split('|')
            if len(parts) >= 3 and parts[0].startswith('file://'):
              path = parts[0].replace('file://', '')
              message = parts[-1].strip()
              issues.append({
                "ruleId": "flutter.lint",
                "level": "warning",
                "message": {"text": message},
                "locations": [{
                  "physicalLocation": {
                    "artifactLocation": {"uri": path},
                    "region": {}
                  }
                }]
              })
      
      sarif["runs"][0]["results"] = issues
      with open("dart-analyze.sarif", "w") as out:
        json.dump(sarif, out, indent=2)
      
      print(f"[+] Generated SARIF with {len(issues)} Flutter issues")
      PYCODE


      - name: Upload Dart SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dart-analyze.sarif

